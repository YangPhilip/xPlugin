apply plugin: 'com.android.application'

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.1"

    aaptOptions {
        // 使用小于0x80的packageId需要添加 '--allow-reserved-package-id'
        // additionalParameters '--allow-reserved-package-id', '--package-id', '0x72',
        additionalParameters '--package-id', '0x80', '--emit-ids', "${rootDir}/runtime/main.id.txt"
    }

    defaultConfig {
        applicationId "org.xplugin.demo.main"
        minSdkVersion 19
        targetSdkVersion 30
        versionCode 2
        versionName "1.0"
    }

    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    flavorDimensions 'rt'
    productFlavors {
        rt_module1 {
            dimension "rt"
            applicationId "org.xplugin.demo.module1"
        }
        rt_module2 {
            dimension "rt"
            applicationId "org.xplugin.demo.module2"
        }
        plugin {
            dimension "rt"
            applicationId "org.xplugin.demo.main"
        }
    }

    String outputPluginPath = null
    def appIds = new HashSet();
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            if (variant.flavorName.startsWith("rt")) {
                appIds.add(variant.applicationId)
                variant.packageApplicationProvider.get().outputDirectory = new File("${rootDir}/runtime")
                outputFileName = "${project.name}_${variant.flavorName}.apk"
            } else if (variant.flavorName == "plugin" && variant.buildType.name == "release") {
                outputFileName = "${applicationId}.png"
                outputPluginPath = output.outputFile
            }
        }
    }

    build.doLast {
        println("#################### install plugin: " + outputPluginPath)
        if (outputPluginPath != null && outputPluginPath.endsWith(".png")) {
            copy {
                from "${outputPluginPath}"
                into "${rootDir}/app/src/main/assets/xpl_res/"
            }

            def mainIdFile = file("${rootDir}/runtime/main.id.txt")
            if (mainIdFile.exists()) {
                // cp emit-ids
                def outputId = null;
                mainIdFile.eachLine { line ->
                    if (line.contains(":")) {
                        outputId = line.split(":")[0]
                        return
                    }
                }
                println("#################### outputId:[${outputId}]")
                for (String appId : appIds) {
                    copy {
                        from mainIdFile.absolutePath
                        into "${rootDir}/runtime/"
                        rename { fileName ->
                            "${appId}.id.txt"
                        }
                    }
                    def idFile = file("${rootDir}/runtime/${appId}.id.txt")
                    def idContent = idFile.text.replaceAll("${outputId}", "${appId}")
                    idFile.withPrintWriter { printWriter ->
                        printWriter.println(idContent)
                    }
                }
            } else {
                throw new FileNotFoundException(mainIdFile.path, "please clean & rebuild the project")
            }

            println("install cmd: ${android.adbExe} push ${outputPluginPath} /sdcard/a_xpl/")
            def command = "${android.adbExe} push ${outputPluginPath} /sdcard/a_xpl/"
            def isWindows = System.properties['os.name'].contains("Windows")
            if (isWindows) {
                exec {
                    ExecSpec execSpec ->
                        executable 'cmd'
                        args '/c', command
                        ignoreExitValue true
                }
            } else {
                exec {
                    ExecSpec execSpec ->
                        executable 'zsh'
                        args '-c', command
                        ignoreExitValue true
                }
            }
        }
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'

    compileOnly project(path: ':xplugin')
    compileOnly 'org.xutils:xutils:3.9.0'
}
