apply plugin: 'com.android.application'

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.1"

    lintOptions {
        disable "Typos"
    }

    aaptOptions {
        additionalParameters '--package-id', '0x80', '-I', "${rootDir}/runtime/main_rt_module1.apk", '--stable-ids', "${rootDir}/runtime/org.xplugin.demo.module1.id.txt"
    }

    defaultConfig {
        applicationId "org.xplugin.demo.module1"
        minSdkVersion 19
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        externalNativeBuild {
            cmake {
                cppFlags ""
            }
        }
    }

    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
            version "3.10.2"
        }
    }

    buildTypes {
        debug {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    String outputPluginPath = null
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            if (variant.buildType.name == "release") {
                outputFileName = "${applicationId}.png"
                outputPluginPath = output.outputFile
            }
        }
    }

    build.doLast {
        println("#################### install plugin: " + outputPluginPath)
        if (outputPluginPath != null && outputPluginPath.endsWith(".png")) {
            copy {
                from "${outputPluginPath}"
                into "${rootDir}/app/src/main/assets/xpl_res/"
            }

            println("install cmd: ${android.adbExe} push ${outputPluginPath} /sdcard/a_xpl/")
            def command = "${android.adbExe} push ${outputPluginPath} /sdcard/a_xpl/"
            def isWindows = System.properties['os.name'].contains("Windows")
            if (isWindows) {
                exec {
                    ExecSpec execSpec ->
                        executable 'cmd'
                        args '/c', command
                        ignoreExitValue true
                }
            } else {
                exec {
                    ExecSpec execSpec ->
                        executable 'zsh'
                        args '-c', command
                        ignoreExitValue true
                }
            }
        }
    }

}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])

    compileOnly project(path: ':xplugin')
    compileOnly 'org.xutils:xutils:3.9.0'
}
